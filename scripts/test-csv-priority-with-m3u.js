#!/usr/bin/env node
/**
 * Script de prueba para verificar la priorizaci√≥n del CSV local
 * sobre fuentes M3U con duplicados simulados
 */

import { HybridChannelRepository } from '../src/infrastructure/repositories/HybridChannelRepository.js';
import { TVAddonConfig } from '../src/infrastructure/config/TVAddonConfig.js';
import fs from 'fs';
import path from 'path';

/**
 * Logger simple para pruebas
 */
const logger = {
  info: (msg, ...args) => console.log(`[INFO] ${new Date().toISOString()} - ${msg}`, ...args),
  warn: (msg, ...args) => console.warn(`[WARN] ${new Date().toISOString()} - ${msg}`, ...args),
  error: (msg, ...args) => console.error(`[ERROR] ${new Date().toISOString()} - ${msg}`, ...args),
  debug: (msg, ...args) => console.log(`[DEBUG] ${new Date().toISOString()} - ${msg}`, ...args)
};

/**
 * Crear un archivo M3U de prueba con algunos canales que duplican los del CSV
 */
function createTestM3U() {
  const testM3uContent = `#EXTM3U
#EXTINF:-1 tvg-id="tv_cnn_espanol" tvg-name="CNN en Espa√±ol" tvg-logo="https://example.com/cnn.png" group-title="Noticias",CNN en Espa√±ol
https://example.com/cnn_duplicate.m3u8
#EXTINF:-1 tvg-id="tv_test_channel" tvg-name="Canal de Prueba" tvg-logo="https://example.com/test.png" group-title="Entretenimiento",Canal de Prueba
https://example.com/test_channel.m3u8
#EXTINF:-1 tvg-id="tv_bbc_world" tvg-name="BBC World News" tvg-logo="https://example.com/bbc.png" group-title="Noticias",BBC World News
https://example.com/bbc_duplicate.m3u8
#EXTINF:-1 tvg-id="tv_unique_channel" tvg-name="Canal √önico" tvg-logo="https://example.com/unique.png" group-title="Deportes",Canal √önico
https://example.com/unique_channel.m3u8`;
  
  const testM3uPath = 'data/test-channels.m3u';
  fs.writeFileSync(testM3uPath, testM3uContent, 'utf8');
  logger.info(`üìù Archivo M3U de prueba creado: ${testM3uPath}`);
  return testM3uPath;
}

/**
 * Limpiar archivos de prueba
 */
function cleanup(testM3uPath) {
  try {
    if (fs.existsSync(testM3uPath)) {
      fs.unlinkSync(testM3uPath);
      logger.info(`üóëÔ∏è  Archivo de prueba eliminado: ${testM3uPath}`);
    }
  } catch (error) {
    logger.warn(`‚ö†Ô∏è  No se pudo eliminar el archivo de prueba: ${error.message}`);
  }
}

async function testCSVPriorityWithM3U() {
  let testM3uPath = null;
  
  try {
    logger.info('üß™ Iniciando prueba de priorizaci√≥n CSV con fuentes M3U...');
    
    const config = TVAddonConfig.getInstance();
    logger.info('‚úÖ Configuraci√≥n cargada');
    
    // Crear archivo M3U de prueba
    testM3uPath = createTestM3U();
    
    // Configurar fuentes de prueba
    const csvPath = 'data/channels.csv';
    const m3uSources = [testM3uPath]; // Usar el archivo M3U de prueba
    
    logger.info(`üìÅ Usando CSV: ${csvPath}`);
    logger.info(`üì° Usando M3U: ${m3uSources.join(', ')}`);
    
    // Crear repositorio h√≠brido
    const repository = new HybridChannelRepository(csvPath, m3uSources, config, logger);
    logger.info('‚úÖ Repositorio h√≠brido creado');
    
    logger.info('üìä Inicializando repositorio h√≠brido...');
    await repository.initialize();
    logger.info('‚úÖ Repositorio inicializado');
    
    // Obtener estad√≠sticas
    const stats = await repository.getRepositoryStats();
    logger.info('‚úÖ Estad√≠sticas obtenidas');
    
    logger.info('üìà Estad√≠sticas del repositorio:');
    logger.info(`  üìÅ Canales CSV: ${stats.csvChannels}`);
    logger.info(`  üåê Canales M3U remotos: ${stats.remoteM3uChannels}`);
    logger.info(`  üíæ Canales M3U locales: ${stats.localM3uChannels}`);
    logger.info(`  üìä Total M3U antes de dedup: ${stats.totalM3uChannelsBeforeDedup || 'N/A'}`);
    logger.info(`  ‚úÖ Canales M3U agregados: ${stats.m3uChannelsAdded}`);
    logger.info(`  ‚ùå Duplicados omitidos por prioridad CSV: ${stats.csvPriorityDuplicates || stats.duplicatesOmitted}`);
    logger.info(`  üéØ Prioridad CSV aplicada: ${stats.csvPriorityApplied ? 'S√ç' : 'NO'}`);
    logger.info(`  üì∫ Total canales finales: ${stats.totalChannels}`);
    
    // Verificar que la priorizaci√≥n funciona
    if (stats.csvPriorityApplied && (stats.csvPriorityDuplicates > 0 || stats.duplicatesOmitted > 0)) {
      logger.info('‚úÖ √âXITO: La priorizaci√≥n del CSV est√° funcionando correctamente');
      const duplicatesCount = stats.csvPriorityDuplicates || stats.duplicatesOmitted;
      logger.info(`   ${duplicatesCount} canales duplicados fueron omitidos de las fuentes M3U`);
    } else if ((stats.csvPriorityDuplicates || stats.duplicatesOmitted) === 0) {
      logger.info('‚ÑπÔ∏è  INFO: No se encontraron duplicados entre CSV y fuentes M3U');
    } else {
      logger.warn('‚ö†Ô∏è  ADVERTENCIA: La priorizaci√≥n del CSV podr√≠a no estar funcionando como se esperaba');
    }
    
    // Obtener algunos canales para verificar
    const allChannels = await repository.getAllChannels();
    logger.info(`\nüì∫ Total de canales obtenidos: ${allChannels.length}`);
    logger.info(`üì∫ Primeros 10 canales (CSV debe aparecer primero):`);
    
    allChannels.slice(0, 10).forEach((channel, index) => {
      const source = channel.id.startsWith('tv_') ? 'CSV' : 'M3U';
      logger.info(`  ${index + 1}. ${channel.name} (${channel.id}) - ${channel.country} [${source}]`);
    });
    
    // Verificar canales espec√≠ficos para confirmar prioridad
    const cnnChannel = allChannels.find(ch => ch.id === 'tv_cnn_espanol');
    const bbcChannel = allChannels.find(ch => ch.id === 'tv_bbc_world');
    const uniqueChannel = allChannels.find(ch => ch.id === 'tv_unique_channel');
    const testChannel = allChannels.find(ch => ch.id === 'tv_test_channel');
    
    logger.info(`\nüîç Verificaci√≥n de canales espec√≠ficos:`);
    if (cnnChannel) {
      logger.info(`  ‚úÖ CNN en Espa√±ol encontrado (debe ser del CSV): ${cnnChannel.name}`);
    }
    if (bbcChannel) {
      logger.info(`  ‚úÖ BBC World News encontrado (debe ser del CSV): ${bbcChannel.name}`);
    }
    if (uniqueChannel) {
      logger.info(`  ‚úÖ Canal √önico encontrado (debe ser del M3U): ${uniqueChannel.name}`);
    }
    if (testChannel) {
      logger.info(`  ‚úÖ Canal de Prueba encontrado (debe ser del M3U): ${testChannel.name}`);
    }
    
    // Verificar filtros de contenido si est√°n activos
    if (stats.contentFiltering && stats.contentFiltering.enabled) {
      logger.info(`\nüõ°Ô∏è  Filtros de contenido activos:`);
      logger.info(`   Canales filtrados: ${stats.contentFiltering.removedChannels}`);
      logger.info(`   Porcentaje removido: ${stats.contentFiltering.removalPercentage}%`);
      
      if (stats.contentFiltering.removedByCategory) {
        const categories = stats.contentFiltering.removedByCategory;
        logger.info(`   Por categor√≠a: religioso=${categories.religious || 0}, adulto=${categories.adult || 0}, pol√≠tico=${categories.political || 0}`);
      }
    }
    
    logger.info('\nüéâ Prueba de priorizaci√≥n CSV con M3U completada exitosamente');
    logger.info('‚úÖ El CSV local tiene prioridad absoluta sobre fuentes M3U');
    logger.info('‚úÖ Los duplicados de M3U son correctamente omitidos');
    
  } catch (error) {
    logger.error('‚ùå Error durante la prueba de priorizaci√≥n CSV:', error);
    logger.error('Stack trace:', error.stack);
    process.exit(1);
  } finally {
    // Limpiar archivos de prueba
    if (testM3uPath) {
      cleanup(testM3uPath);
    }
  }
}

// Ejecutar la prueba
console.log('üöÄ Iniciando script de prueba con M3U...');
testCSVPriorityWithM3U().then(() => {
  console.log('‚úÖ Script completado exitosamente');
}).catch(error => {
  console.error('‚ùå Error en el script:', error);
  process.exit(1);
});

export { testCSVPriorityWithM3U };