/**
 * Script de prueba para verificar que la validaci√≥n peri√≥dica ya no desactiva canales BITEL v√°lidos
 * Simula el flujo completo de validaci√≥n peri√≥dica con la correcci√≥n aplicada
 */

import { TVAddonConfig } from './src/infrastructure/config/TVAddonConfig.js';
import { ChannelRepositoryFactory } from './src/infrastructure/factories/ChannelRepositoryFactory.js';
import { StreamHealthService } from './src/infrastructure/services/StreamHealthService.js';
import { InvalidChannelManagementService } from './src/application/services/InvalidChannelManagementService.js';

class PeriodicValidationTest {
  constructor() {
    this.config = new TVAddonConfig();
    this.logger = {
      info: (msg) => console.log(`[INFO] ${msg}`),
      warn: (msg) => console.log(`[WARN] ${msg}`),
      error: (msg) => console.log(`[ERROR] ${msg}`),
      debug: (msg) => console.log(`[DEBUG] ${msg}`)
    };
  }

  async initialize() {
    this.logger.info('üîß Inicializando servicios para prueba de validaci√≥n peri√≥dica...');
    
    this.channelRepository = await ChannelRepositoryFactory.createRepository(this.config, this.logger);
    this.healthService = new StreamHealthService(this.config, this.logger);
    this.invalidChannelService = new InvalidChannelManagementService(
      this.channelRepository, 
      this.config, 
      this.logger
    );
  }

  async testPeriodicValidationFlow() {
    this.logger.info('\nüîç PRUEBA DE VALIDACI√ìN PERI√ìDICA CON CORRECCI√ìN');
    this.logger.info('=' .repeat(60));
    
    // 1. Obtener canales BITEL para prueba
    const allChannels = await this.channelRepository.getAllChannelsUnfiltered();
    const bitelChannels = allChannels.filter(channel => 
      channel.streamUrl && channel.streamUrl.includes('tv360.bitel.com.pe')
    ).slice(0, 5); // Tomar solo 5 para la prueba
    
    if (bitelChannels.length === 0) {
      this.logger.warn('‚ö†Ô∏è  No se encontraron canales BITEL para probar');
      return;
    }
    
    this.logger.info(`üì∫ Canales BITEL encontrados para prueba: ${bitelChannels.length}`);
    bitelChannels.forEach(ch => {
      this.logger.info(`  - ${ch.id}: ${ch.name}`);
    });
    
    // 2. Primera validaci√≥n (simular validaci√≥n inicial)
    this.logger.info('\n--- Primera Validaci√≥n (Inicial) ---');
    const firstReport = await this.healthService.checkChannels(bitelChannels, 5, false);
    
    this.logger.info(`Resultados primera validaci√≥n: ${firstReport.ok}/${firstReport.total} v√°lidos`);
    
    // Mostrar detalles de URLs generadas
    this.logger.info('\nüîó URLs generadas en primera validaci√≥n:');
    firstReport.results.forEach(result => {
      if (result.meta && result.meta.processedUrl) {
        const uidMatch = result.meta.processedUrl.match(/uid=([^&]+)/);
        const uid = uidMatch ? uidMatch[1] : 'NO_UID';
        this.logger.info(`  ${result.id}: UID=${uid}`);
      }
    });
    
    // 3. Simular espera (menor que el cache de 20 minutos)
    this.logger.info('\n‚è±Ô∏è  Simulando espera de 10 minutos (menor que cache de 20 min)...');
    
    // 4. Segunda validaci√≥n (simular validaci√≥n peri√≥dica)
    this.logger.info('\n--- Segunda Validaci√≥n (Peri√≥dica) ---');
    const secondReport = await this.healthService.checkChannels(bitelChannels, 5, false);
    
    this.logger.info(`Resultados segunda validaci√≥n: ${secondReport.ok}/${secondReport.total} v√°lidos`);
    
    // Mostrar detalles de URLs generadas
    this.logger.info('\nüîó URLs generadas en segunda validaci√≥n:');
    secondReport.results.forEach(result => {
      if (result.meta && result.meta.processedUrl) {
        const uidMatch = result.meta.processedUrl.match(/uid=([^&]+)/);
        const uid = uidMatch ? uidMatch[1] : 'NO_UID';
        this.logger.info(`  ${result.id}: UID=${uid}`);
      }
    });
    
    // 5. Comparar consistencia de UIDs
    this.logger.info('\nüìä AN√ÅLISIS DE CONSISTENCIA DE UIDs:');
    this.logger.info('=' .repeat(50));
    
    let consistentUids = 0;
    let totalBitelChannels = 0;
    
    // Analizar todos los canales BITEL que fueron validados
    bitelChannels.forEach(channel => {
      const firstResult = firstReport.results.find(r => r.id === channel.id);
      const secondResult = secondReport.results.find(r => r.id === channel.id);
      
      if (firstResult && secondResult) {
        totalBitelChannels++;
        
        const firstUid = firstResult.meta?.processedUrl?.match(/uid=([^&]+)/)?.[1] || 'NO_UID';
        const secondUid = secondResult.meta?.processedUrl?.match(/uid=([^&]+)/)?.[1] || 'NO_UID';
        
        const isConsistent = firstUid === secondUid && firstUid !== 'NO_UID';
        if (isConsistent) consistentUids++;
        
        this.logger.info(`${channel.id} (${channel.name}):`);
        this.logger.info(`  Primera:  ${firstUid}`);
        this.logger.info(`  Segunda:  ${secondUid}`);
        this.logger.info(`  Estado:   ${isConsistent ? '‚úÖ CONSISTENTE' : '‚ùå INCONSISTENTE'}`);
        this.logger.info('');
      }
    });
    
    // 6. Simular procesamiento de resultados (como har√≠a el sistema real)
    this.logger.info('\nüîÑ SIMULANDO PROCESAMIENTO DE RESULTADOS:');
    
    if (this.invalidChannelService.isEnabled()) {
      this.logger.info('‚úÖ InvalidChannelManagementService est√° habilitado');
      
      // Contar cu√°ntos canales se desactivar√≠an
      const wouldBeDeactivated = secondReport.results.filter(r => !r.ok).length;
      const wouldBeValidated = secondReport.results.filter(r => r.ok).length;
      
      this.logger.info(`üìà Canales que se marcar√≠an como v√°lidos: ${wouldBeValidated}`);
      this.logger.info(`üìâ Canales que se desactivar√≠an: ${wouldBeDeactivated}`);
      
      // Mostrar detalles de canales que fallar√≠an
      const failedChannels = secondReport.results.filter(r => !r.ok);
      if (failedChannels.length > 0) {
        this.logger.info('\n‚ùå Canales que fallar√≠an:');
        failedChannels.forEach(result => {
          this.logger.info(`  - ${result.id}: ${result.meta?.reason || 'Unknown error'}`);
        });
      }
    } else {
      this.logger.info('‚ö†Ô∏è  InvalidChannelManagementService est√° deshabilitado');
    }
    
    // 7. Resultado final
    this.logger.info('\nüéØ RESULTADO FINAL:');
    this.logger.info('=' .repeat(50));
    
    if (totalBitelChannels === 0) {
      this.logger.info('‚ö†Ô∏è  No se encontraron canales BITEL para evaluar');
    } else {
      const consistencyRate = (consistentUids / totalBitelChannels) * 100;
      
      this.logger.info(`üìä Consistencia de UIDs: ${consistentUids}/${totalBitelChannels} (${consistencyRate.toFixed(1)}%)`);
      
      if (consistencyRate === 100) {
        this.logger.info('‚úÖ √âXITO TOTAL: Todos los UIDs BITEL se mantuvieron consistentes');
        this.logger.info('‚úÖ La correcci√≥n del cache resolvi√≥ el problema completamente');
        this.logger.info('‚úÖ Las validaciones peri√≥dicas NO deber√≠an desactivar canales BITEL v√°lidos');
      } else if (consistencyRate >= 80) {
        this.logger.info('‚úÖ √âXITO PARCIAL: La mayor√≠a de UIDs se mantuvieron consistentes');
        this.logger.info('‚ö†Ô∏è  Revisar casos inconsistentes para optimizaci√≥n adicional');
      } else {
        this.logger.info('‚ùå PROBLEMA PERSISTENTE: Muchos UIDs siguen siendo inconsistentes');
        this.logger.info('‚ùå Se requiere investigaci√≥n adicional del problema');
      }
    }
    
    // 8. Recomendaciones
    this.logger.info('\nüí° RECOMENDACIONES FINALES:');
    this.logger.info('- Cache de UIDs BITEL: 20 minutos (mayor que validaci√≥n de 15 min)');
    this.logger.info('- Monitorear logs de producci√≥n para confirmar la correcci√≥n');
    this.logger.info('- Considerar alertas si la tasa de desactivaci√≥n supera el 10%');
    this.logger.info('- Revisar configuraci√≥n de timeout si hay muchos fallos de red');
    
    this.logger.info('\n=== PRUEBA DE VALIDACI√ìN PERI√ìDICA COMPLETADA ===');
  }
}

async function main() {
  const test = new PeriodicValidationTest();
  
  try {
    await test.initialize();
    await test.testPeriodicValidationFlow();
  } catch (error) {
    console.error('‚ùå Error en la prueba:', error);
  }
}

// Ejecutar prueba
main().catch(console.error);