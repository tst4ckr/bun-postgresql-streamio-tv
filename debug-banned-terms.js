/**
 * Script de depuraci√≥n para verificar el filtrado de t√©rminos espec√≠ficos
 * Analiza por qu√© ciertos t√©rminos no est√°n siendo filtrados correctamente
 */

import { 
    isChannelBanned, 
    isChannelBannedWithThreshold,
    getBannedChannels,
    calculateStringSimilarity,
    setSimilarityThreshold
} from './src/config/banned-channels.js';

console.log('üîç Iniciando depuraci√≥n de t√©rminos prohibidos espec√≠ficos\n');

// T√©rminos que deber√≠an estar siendo filtrados
const problematicTerms = [
    '- Rs', 'Al', 'Saudi', 'Sama', 'Asharq', 'Arryadia', 
    'Bahrain', 'Dubai', 'Ad', 'Rotana', 'ksa', 'libya', 
    'tunisia', 'ien'
];

// Ejemplos de nombres de canales que podr√≠an contener estos t√©rminos
const testChannels = [
    'Al Jazeera',
    'Al Arabiya', 
    'Saudi TV',
    'Dubai Sports',
    'Rotana Cinema',
    'Bahrain TV',
    'Asharq News',
    'Sama TV',
    'Ad Sports',
    'KSA Sports',
    'Libya TV',
    'Tunisia National',
    'Alien Channel', // Contiene 'Al' pero no deber√≠a ser filtrado
    'Advertisement Channel', // Contiene 'Ad' pero no deber√≠a ser filtrado
    'Algeria TV', // Contiene 'Al' pero no deber√≠a ser filtrado
    'Adult Channel', // Contiene 'Ad' pero S√ç deber√≠a ser filtrado por 'ADULT'
];

console.log('üìã T√©rminos prohibidos configurados:');
const bannedChannels = getBannedChannels();
console.log(bannedChannels.join(', '));
console.log(`\nüìä Total de t√©rminos prohibidos: ${bannedChannels.length}\n`);

console.log('üß™ Probando filtrado con t√©rminos espec√≠ficos:\n');

// Probar cada t√©rmino problem√°tico
problematicTerms.forEach(term => {
    console.log(`\nüîç Analizando t√©rmino: "${term}"`);
    
    // Verificar si el t√©rmino est√° en la lista
    const isInList = bannedChannels.includes(term);
    console.log(`   ‚úì Est√° en lista prohibida: ${isInList}`);
    
    // Probar canales que contienen este t√©rmino
    const matchingChannels = testChannels.filter(channel => 
        channel.toLowerCase().includes(term.toLowerCase())
    );
    
    if (matchingChannels.length > 0) {
        console.log(`   üì∫ Canales que contienen "${term}":`);
        matchingChannels.forEach(channel => {
            const isBanned = isChannelBanned(channel);
            const similarity = calculateStringSimilarity(channel.toLowerCase(), term.toLowerCase());
            console.log(`      - "${channel}" -> Baneado: ${isBanned}, Similitud: ${similarity.toFixed(3)}`);
        });
    }
});

console.log('\n\nüî¨ An√°lisis detallado de casos espec√≠ficos:\n');

// Casos espec√≠ficos para analizar
const specificCases = [
    { channel: 'Al Jazeera', expectedBanned: true, reason: 'Contiene "Al"' },
    { channel: 'Saudi TV', expectedBanned: true, reason: 'Contiene "Saudi"' },
    { channel: 'Dubai Sports', expectedBanned: true, reason: 'Contiene "Dubai"' },
    { channel: 'Alien Channel', expectedBanned: false, reason: 'Contiene "Al" pero como parte de "Alien"' },
    { channel: 'Advertisement', expectedBanned: false, reason: 'Contiene "Ad" pero como parte de "Advertisement"' },
];

specificCases.forEach(testCase => {
    console.log(`\nüì∫ Canal: "${testCase.channel}"`);
    console.log(`   üìù Raz√≥n: ${testCase.reason}`);
    console.log(`   üéØ Esperado baneado: ${testCase.expectedBanned}`);
    
    const actualBanned = isChannelBanned(testCase.channel);
    console.log(`   ‚úÖ Resultado actual: ${actualBanned}`);
    
    const status = actualBanned === testCase.expectedBanned ? '‚úÖ CORRECTO' : '‚ùå INCORRECTO';
    console.log(`   ${status}`);
    
    // An√°lisis detallado de por qu√© fue o no fue baneado
    console.log(`   üîç An√°lisis detallado:`);
    
    bannedChannels.forEach(bannedTerm => {
        const channelLower = testCase.channel.toLowerCase();
        const termLower = bannedTerm.toLowerCase();
        
        // Coincidencia exacta
        const exactMatch = channelLower === termLower;
        if (exactMatch) {
            console.log(`      - Coincidencia exacta con "${bannedTerm}"`);
            return;
        }
        
        // Similitud
        const similarity = calculateStringSimilarity(channelLower, termLower);
        if (similarity >= 0.9) {
            console.log(`      - Similitud alta (${similarity.toFixed(3)}) con "${bannedTerm}"`);
        }
        
        // Contenci√≥n
        if (bannedTerm.length <= 2) {
            // Para t√©rminos cortos, usar coincidencia de palabra completa
            const regex = new RegExp(`\\b${bannedTerm.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\b`, 'i');
            if (regex.test(testCase.channel)) {
                console.log(`      - Coincidencia de palabra completa con "${bannedTerm}"`);
            }
        } else {
            // Para t√©rminos largos, usar contenci√≥n normal
            if (channelLower.includes(termLower)) {
                console.log(`      - Contiene el t√©rmino "${bannedTerm}"`);
            }
        }
    });
});

console.log('\n\nüéØ Recomendaciones:\n');
console.log('1. Verificar que los t√©rminos cortos como "Al" y "Ad" usen coincidencia de palabra completa');
console.log('2. Confirmar que el umbral de similitud (0.9) es apropiado');
console.log('3. Revisar la l√≥gica de contenci√≥n para t√©rminos espec√≠ficos');
console.log('4. Considerar usar expresiones regulares m√°s espec√≠ficas para t√©rminos ambiguos');

console.log('\nüèÅ Depuraci√≥n completada.');